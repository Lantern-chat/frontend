@use "sass:math";

@function trunc($x) {
    @if $x > 0 {
        @return floor($x);
    } @else {
        @return ceil($x);
    }
}

@function math-pow-polyfill($number, $exp) {
    $exp1: round($exp);
    $result: pow-int($number, $exp1);

    @if ($exp1 != $exp) {
        $result: $result * math-exp(($exp - $exp1) * math-ln($number));
    }

    @return $result;
}

@function pow-int($number, $exp) {
    @if $exp == 0 {
        @return 1;
    } @else if $exp < 0 {
        @return math.div(1, pow-int($number, -$exp));
    } @else {
        $e: floor(math.div($exp, 2));
        $pow: math-pow-polyfill($number, $e);
        @if $e * 2 == $exp {
            @return $pow * $pow;
        } @else {
            @return $pow * $pow * $number;
        }
    }
}

@function math-exp($value) {
    $item: 1;
    $result: 1;

    @for $index from 1 to 100 {
        $item: math.div($item * $value, $index);
        $result: $result + $item;
    }

    @return $result;
}

@function math-ln($value) {
    $ten-exp: 0;
    $ln-ten: 2.30258509;

    @while ($value > 1) {
        $ten-exp: $ten-exp + 1;
        $value: math.div($value, 10);
    }

    $item: -1;
    $result: 0;

    @for $index from 1 to 100 {
        $item: $item * (1 - $value);
        $result: $result + math.div($item, $index);
    }

    @return $result + $ten-exp * $ln-ten;
}

@function factorial($endAt, $startAt: 1, $currentVal: 1) {
    $accVal: $currentVal;

    @for $i from $startAt + 1 to $endAt + 1 {
        $accVal: $i * $accVal;
    }

    @return $accVal;
}

$PHI: 1.6180339887498948482045868343656381177203091798057628621354486227;
$PI: 3.14159265358979323846;
$TWO_PI: $PI * 2;
$HALF_PI: math.div($PI, 2);
$QUARTER_PI: math.div($PI, 4);
$SIN_ITERATION: 10;

@function sin($rad) {
    // Ensure value is between 0 to TWO_PI
    $normalisedRad: $rad % $TWO_PI;
    @if $normalisedRad < 0 {
        $normalisedRad: $normalisedRad + $TWO_PI;
    }

    // Known whole numbers to return without computing
    @if $normalisedRad == 0 or $normalisedRad == $PI {
        @return 0;
    }
    @if $normalisedRad == $HALF_PI {
        @return 1;
    }

    // Memorise squared rad val to reduce recomputation
    $radSquare: $normalisedRad * $normalisedRad;
    $radPowAccVal: $normalisedRad;

    $factorialCounter: 1;
    $factorialAccVal: 1;

    $totalVal: $normalisedRad;

    // Iteratively compute an approx value
    @for $i from 0 to $SIN_ITERATION {
        $radPowAccVal: $radPowAccVal * -$radSquare;
        $factorialAccVal: factorial($factorialCounter + 2, $factorialCounter, $factorialAccVal);
        $factorialCounter: $factorialCounter + 2;

        $totalVal: $totalVal + math.div($radPowAccVal, $factorialAccVal);
    }

    @return $totalVal;
}

@function cos($rad) {
    @return sin($rad + $HALF_PI);
}

@function golden_ratio($base, $unit) {
    @return #{$base + $unit} golden_ratio_other($base, $unit);
}

@function golden_ratio_other($base, $unit) {
    $other: $base * $PHI;
    @return #{$other + $unit};
}
